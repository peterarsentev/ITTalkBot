package ru.job4j.it.talk.service;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.job4j.it.talk.config.UserConfigKey;
import ru.job4j.it.talk.content.Content;
import ru.job4j.it.talk.model.UserConfig;
import ru.job4j.it.talk.service.ui.TgButtons;

import java.nio.file.Path;
import java.util.HashMap;
import java.util.function.Function;

@Service
@Slf4j
@AllArgsConstructor
public class SituationService {
    private final GigaChatService gigaChatService;
    private final TextToSpeech textToSpeech;
    private final UserService userService;
    private final TgButtons tgButtons;

    public void process(Path userDir, Update update, Function<Content, Integer> receive) {
        var message = (Message) update.getCallbackQuery().getMessage();
        var data = update.getCallbackQuery().getData();
        var user = userService.findByClientId(update.getCallbackQuery().getFrom().getId()).get();
        var lang = userService.findUserConfigByKey(user.getId(), UserConfigKey.TARGET_LANG)
                .orElse(new UserConfig(-1L, user, UserConfigKey.TARGET_LANG.key, "en"))
                .getValue();
        receive.apply(
                Content.of().chatId(user.getChatId())
                        .deleteMessageId(message.getMessageId()).build());
        var analyzeMessageId = receive.apply(
                Content.of().chatId(message.getChatId())
                        .text("üîÑ * –°–æ–∑–¥–∞—é —Å–∏—Ç—É–∞—Ü–∏—é ...*").build());
        var botText = gigaChatService.callRole(
                String.format("–ü—Ä–∏–¥—É–º–∞–π —Å–∏—Ç—É–∞—Ü–∏—é –≤ %s. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
                        situations(data)), "", -1L
        );
        var botTextLang = gigaChatService.callWithoutSystem(
                String.format("–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n%s", botText), -1L);
        receive.apply(
                Content.of().chatId(user.getChatId())
                        .deleteMessageId(analyzeMessageId).build());
        var botMessageId = receive.apply(
                Content.of()
                        .chatId(message.getChatId())
                        .text(String.format("üó£Ô∏è *–ë–æ—Ç [%s]*:\n%s", lang, botTextLang))
                        .buttons(tgButtons.translate())
                        .build()
        );
        var mp3Bot = textToSpeech.process(userDir, botMessageId, botTextLang, lang);
        receive.apply(
                Content.of()
                        .chatId(message.getChatId())
                        .voice(mp3Bot)
                        .build()
        );
    }

    public String situations(String key) {
        var locationMap = new HashMap<String, String>();
        locationMap.put("situation_school", "–®–∫–æ–ª–∞");
        locationMap.put("situation_university", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç");
        locationMap.put("situation_hospital", "–ë–æ–ª—å–Ω–∏—Ü–∞");
        locationMap.put("situation_stadium", "–°—Ç–∞–¥–∏–æ–Ω");
        locationMap.put("situation_park", "–ü–∞—Ä–∫");
        locationMap.put("situation_market", "–†—ã–Ω–æ–∫");
        locationMap.put("situation_shop", "–ú–∞–≥–∞–∑–∏–Ω");
        locationMap.put("situation_cafe", "–ö–∞—Ñ–µ");
        locationMap.put("situation_restaurant", "–†–µ—Å—Ç–æ—Ä–∞–Ω");
        locationMap.put("situation_cinema", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä");
        locationMap.put("situation_theater", "–¢–µ–∞—Ç—Ä");
        locationMap.put("situation_library", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞");
        locationMap.put("situation_museum", "–ú—É–∑–µ–π");
        locationMap.put("situation_airport", "–ê—ç—Ä–æ–ø–æ—Ä—Ç");
        locationMap.put("situation_train_station", "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª");
        locationMap.put("situation_bus_station", "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª");
        locationMap.put("situation_bank", "–ë–∞–Ω–∫");
        locationMap.put("situation_post_office", "–ü–æ—á—Ç–∞");
        locationMap.put("situation_beach", "–ü–ª—è–∂");
        locationMap.put("situation_kindergarten", "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥");
        locationMap.put("situation_church", "–¶–µ—Ä–∫–æ–≤—å");
        locationMap.put("situation_sports_palace", "–î–≤–æ—Ä–µ—Ü —Å–ø–æ—Ä—Ç–∞");
        locationMap.put("situation_gallery", "–ì–∞–ª–µ—Ä–µ—è");
        locationMap.put("situation_concert_hall", "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª");
        locationMap.put("situation_shopping_center", "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä");
        locationMap.put("situation_fitness_center", "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä");
        locationMap.put("situation_beauty_salon", "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã");
        locationMap.put("situation_pharmacy", "–ê–ø—Ç–µ–∫–∞");
        locationMap.put("situation_police", "–ü–æ–ª–∏—Ü–∏—è");
        locationMap.put("situation_city_hall", "–ú—ç—Ä–∏—è");
        return locationMap.get(key);
    }
}
