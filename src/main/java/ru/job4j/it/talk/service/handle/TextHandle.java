package ru.job4j.it.talk.service.handle;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Message;
import ru.job4j.it.talk.config.UserConfigKey;
import ru.job4j.it.talk.content.Content;
import ru.job4j.it.talk.model.UserConfig;
import ru.job4j.it.talk.service.*;
import ru.job4j.it.talk.service.ui.TgButtons;
import ru.job4j.it.talk.service.util.LevelLangPrompt;

import java.nio.file.Path;
import java.util.function.Function;

@Service
@AllArgsConstructor
public class TextHandle {
    private final UserService userService;
    private final TgButtons tgButtons;
    private final Analyze analyze;
    private final GigaChatService gigaChatService;
    private final TextToSpeech textToSpeech;
    private final StatisticService statisticService;
    private final RetellService retellService;
    private final SmallTalkService smalltalkService;
    private final LevelLangPrompt levelLangPrompt;

    public void process(Path userDir, Message message,
                        Function<Content, Integer> receive) {
        var user = userService.findOrCreateUser(message);
        var chatId = message.getChatId();
        var text = message.getText();
        if ("/start".equalsIgnoreCase(text) || "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ".equalsIgnoreCase(text)) {
            String introMessage = "üëã *TalkSharp | –õ–∏–Ω–≥–≤–æ-—Ç—Ä–µ–Ω–µ—Ä* \n\n"
                    + "üó£Ô∏è –¢—Ä–µ–Ω–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å –Ω–∞ 10 —è–∑—ã–∫–∞—Ö: \uD83C\uDDFA\uD83C\uDDF8, \uD83C\uDDE9\uD83C\uDDEA, \uD83C\uDDF7\uD83C\uDDFA\n\n"
                    + "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*üéôÔ∏è\n"
                    + "2Ô∏è‚É£ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é *—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é* üìù\n"
                    + "3Ô∏è‚É£ –Ø –ø—Ä–æ–≤–µ—Ä—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ *–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫* üßê\n"
                    + "4Ô∏è‚É£ –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é *–∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç* —Å –≥–æ–ª–æ—Å–æ–º –Ω–æ—Å–∏—Ç–µ–ª—è —è–∑—ã–∫–∞ üéß\n\n"
                    + "‚úÖ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!";
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text(introMessage)
                            .menu(tgButtons.menu())
                            .build()
            );
            smalltalkService.process(userDir, chatId, message, receive);
        } else if ("/settings".equalsIgnoreCase(text) || "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*")
                            .buttons(tgButtons.settings())
                            .build()
            );
        } else if ("/small_talk".equalsIgnoreCase(text) || "üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            smalltalkService.process(userDir, chatId, message, receive);
        } else if ("/situation".equalsIgnoreCase(text) || "üìù –°–∏—Ç—É–∞—Ü–∏—è".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("*C–∏—Ç—É–∞—Ü–∏—è* \n\n–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ. –ë–æ—Ç –æ–ø–∏—à–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –∏ –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å \uD83D\uDCAC.")
                            .buttons(tgButtons.situations())
                            .build()
            );
        } else if ("/statistic".equalsIgnoreCase(text) || "üèÜ –†–µ–π—Ç–∏–Ω–≥".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            statisticService.process(user, receive);
        } else if ("/retell".equalsIgnoreCase(text) || "üîÑ –ü–µ—Ä–µ—Å–∫–∞–∑".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            retellService.process(userDir, user, receive);
        } else {
            textProcess(userDir, chatId, message, receive);
        }
    }

    public void textProcess(Path userDir, Long chatId,
                        Message message,
                        Function<Content, Integer> receive) {
        var user = userService.findOrCreateUser(message);
        var analyzeMessageId = receive.apply(
                Content.of().chatId(chatId)
                        .text("üîÑ _–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ ..._").build());
        var lang = userService.findUserConfigByKey(user.getId(), UserConfigKey.TARGET_LANG)
                .orElse(new UserConfig(-1L, user, UserConfigKey.TARGET_LANG.key, "en"))
                .getValue();
        var level = userService.findUserConfigByKey(user.getId(), UserConfigKey.TARGET_LANG)
                .orElse(new UserConfig(-1L, user, UserConfigKey.LEVEL_LANG.key, "A1"))
                .getValue();
        var originText = message.getText();
        receive.apply(
                Content.of().chatId(chatId)
                        .deleteMessageId(analyzeMessageId).build()
        );
        var resp = String.format("üó£Ô∏è *–í—ã [%s]*:\n%s", lang, originText);
        var recognitionMessageId = receive.apply(
                Content.of().chatId(chatId).text(resp)
                        .buttons(tgButtons.recommendationAndTranslation()).build()
        );
        analyze.processText(user, originText, lang, recognitionMessageId, "", receive);
        var audioMessageId = receive.apply(
                Content.of().chatId(chatId).text("üéôÔ∏è _–°–æ–∑–¥–∞—é –∞—É–¥–∏–æ..._").build()
        );
        var mp3File = textToSpeech.process(userDir, message.getMessageId(), originText, lang);
        receive.apply(
                Content.of().chatId(chatId)
                        .voice(mp3File).build()
        );
        receive.apply(
                Content.of().chatId(chatId)
                        .deleteMessageId(audioMessageId).build()
        );
        var botText = gigaChatService.callRole(levelLangPrompt.prompt(level), originText, chatId);
        var botMessageId = receive.apply(
                Content.of()
                        .chatId(chatId)
                        .text(String.format("üó£Ô∏è *–ë–æ—Ç [%s]*:\n%s", lang, botText))
                        .build()
        );
        var audioBotMessageId = receive.apply(
                Content.of().chatId(chatId).text("üéôÔ∏è _–°–æ–∑–¥–∞—é –∞—É–¥–∏–æ..._").build()
        );
        var mp3Bot = textToSpeech.process(userDir, botMessageId, botText, lang);
        receive.apply(
                Content.of()
                        .chatId(chatId)
                        .deleteMessageId(audioBotMessageId)
                        .build()
        );
        receive.apply(
                Content.of()
                        .chatId(chatId)
                        .voice(mp3Bot)
                        .build()
        );
    }
}
