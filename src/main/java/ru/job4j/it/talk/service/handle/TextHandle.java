package ru.job4j.it.talk.service.handle;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Message;
import ru.job4j.it.talk.config.UserConfigKey;
import ru.job4j.it.talk.content.Content;
import ru.job4j.it.talk.model.UserConfig;
import ru.job4j.it.talk.service.*;
import ru.job4j.it.talk.service.job4j.QuestionService;
import ru.job4j.it.talk.service.job4j.TopicService;
import ru.job4j.it.talk.service.ui.Prompt;
import ru.job4j.it.talk.service.ui.TgButtons;
import ru.job4j.it.talk.service.util.LevelLangPrompt;
import ru.job4j.it.talk.service.util.MarkDown;

import java.nio.file.Path;
import java.util.function.Function;

@Service
@AllArgsConstructor
public class TextHandle {
    private final UserService userService;
    private final TgButtons tgButtons;
    private final Analyze analyze;
    private final GigaChatService gigaChatService;
    private final QuestionService questionService;
    private final StatisticService statisticService;
    private final TopicService topicService;

    public void process(Path userDir, Message message,
                        Function<Content, Integer> receive) {
        var user = userService.findOrCreateUser(message);
        var chatId = message.getChatId();
        var text = message.getText();
        if ("/start".equalsIgnoreCase(text) || "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ".equalsIgnoreCase(text)) {
            String introMessage = "üëã ITTalkBot | IT-–¢—Ä–µ–Ω–µ—Ä\n"
                    + "\n"
                    + "\uD83D\uDDE3\uFE0F –ì–æ—Ç–æ–≤—å—Å—è –∫ IT-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º —Å –ø–æ–º–æ—â—å—é –≥–æ–ª–æ—Å–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!\n"
                    + "\n"
                    + "1\uFE0F‚É£ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –≤–æ–ø—Ä–æ—Å —Å IT-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è \uD83C\uDFA4  \n"
                    + "2\uFE0F‚É£ –ó–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç  \n"
                    + "3\uFE0F‚É£ –Ø –ø–µ—Ä–µ–≤–µ–¥—É –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –æ—Ç–≤–µ—Ç \uD83D\uDCDD  \n"
                    + "4\uFE0F‚É£ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ \uD83E\uDDD0  \n"
                    + "\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + userService.totalSize();
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text(introMessage)
                            .menu(tgButtons.menu())
                            .build()
            );
        } else if ("/settings".equalsIgnoreCase(text) || "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*")
                            .buttons(tgButtons.settings())
                            .build()
            );
        } else if ("/topics".equalsIgnoreCase(text) || "üí¨ –¢–µ–º—ã".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:*")
                            .buttons(tgButtons.topics(0))
                            .build()
            );
        } else if ("/situation".equalsIgnoreCase(text) || "üìù –°–∏—Ç—É–∞—Ü–∏—è".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("*C–∏—Ç—É–∞—Ü–∏—è* \n\n–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ. –ë–æ—Ç –æ–ø–∏—à–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –∏ –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å \uD83D\uDCAC.")
                            .buttons(tgButtons.situations())
                            .build()
            );
        } else if ("/statistic".equalsIgnoreCase(text) || "üèÜ –†–µ–π—Ç–∏–Ω–≥".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
            statisticService.process(user, receive);
        } else if ("/retell".equalsIgnoreCase(text) || "üîÑ –ü–µ—Ä–µ—Å–∫–∞–∑".equalsIgnoreCase(text)) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .deleteMessageId(message.getMessageId())
                            .build()
            );
        } else {
            textProcess(chatId, message, receive);
        }
    }

    public void textProcess(Long chatId,
                        Message message,
                        Function<Content, Integer> receive) {
        var user = userService.findOrCreateUser(message);
        var analyzeMessageId = receive.apply(
                Content.of().chatId(chatId)
                        .text("üîÑ _–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ ..._").build());
        var originText = message.getText();
        receive.apply(
                Content.of().chatId(chatId)
                        .deleteMessageId(analyzeMessageId).build()
        );
        var resp = String.format("üó£Ô∏è *–í—ã*:\n%s", originText);
        receive.apply(
                Content.of().chatId(chatId).text(resp).build()
        );
        var botCallMessageId = receive.apply(
                Content.of().chatId(chatId).text("üîÑ _–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..._").build()
        );
        var questionId = userService.findUserConfigByKey(user.getId(), UserConfigKey.QUESTION_ID);
        if (questionId.isEmpty()) {
            receive.apply(
                    Content.of()
                            .chatId(chatId)
                            .text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                            .build()
            );
            return;
        }
        var question = questionService.findNavigateById(Long.parseLong(questionId.get().getValue()));
        var topic = topicService.findById(question.getQuestion().getTopicId());
        var req = new Prompt(new MarkDown()).checkAnswer(
                topic.getName(),
                question.getQuestion().getDescription(),
                originText
        );
        var botText = gigaChatService.callWithoutSystem(req, chatId);
        receive.apply(
                Content.of()
                        .chatId(chatId)
                        .text(String.format("üó£Ô∏è *–ë–æ—Ç*:\n%s", botText))
                        .buttons(tgButtons.answerNavigate(topic.getId(),
                                question.getPreviousId(),
                                question.getNextId()))
                        .build()
        );
        receive.apply(
                Content.of()
                        .chatId(chatId)
                        .deleteMessageId(botCallMessageId)
                        .build()
        );
    }
}
